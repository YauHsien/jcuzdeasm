-module(code_gen).
-include("../include/jcuzdeasm.hrl").
-export([ class/1, interface/1 ]).

-define(comment_begin, "//").
-define(sign, "generated by jcuzdeasm").

class(Cls) ->
    [ package(Cls#class.package),
      imports(Cls#class.imports),
      sequence([ Cls#class.access,
		 Cls#class.abstract,
		 Cls#class.level,
		 Cls#class.final,
		 class,
		 Cls#class.name,
		 case Cls#class.inherits of
		     undefined ->
			 undefined;
		     #class{}= Class1 ->
			 {extends, Class1#class.name}
		 end,
		 case Cls#class.implements of
		     [] ->
			 undefined;
		     Itfs ->
			 {implements, string:join(lists:map(fun(Itf) -> Itf#interface.name end, Itfs))}
		 end,
		 ${
	       ]),
      sequence([ $},
		 ?comment_begin,
		 ?sign
	       ])
    ].

interface(Itf) ->
    [ package(Itf#interface.package),
      imports(Itf#interface.imports),
      sequence([ Itf#interface.access,
		 Itf#interface.abstract,
		 Itf#interface.level,
		 Itf#interface.final,
		 interface,
		 Itf#interface.name,
		 case Itf#interface.inherits of
		     undefined ->
			 undefined;
		     #interface{}= Interface1 ->
			 {extends, Interface1#interface.name}
		 end,
		 ${
	       ]),
      sequence([ $},
		 ?comment_begin,
		 ?sign
	       ])
    ].

qualified_name(Package, undefined) ->
    string:join(Package, ".");
qualified_name(Package, Name) ->
    string:join(lists:append(Package, [Name]), ".").

package([]) ->
    undefined;
package(List) ->
    sequence([ package, qualified_name(List, undefined), $; ]).

imports(List) ->
    lists:map(fun(#class{}= Cls) ->
		      sequence([ import, qualified_name(Cls#class.package, Cls#class.name), $; ]);
		 (#interface{}= Itf) ->
		      sequence([ import, qualified_name(Itf#interface.package, Itf#interface.name), $; ])
	      end,
	      List).


sequence(List) ->
    string:join(
      lists:append(
	lists:filter(fun(undefined) -> false; (_) -> true end,

		     lists:map(fun(undefined) -> undefined;
				  (Atom) when is_atom(Atom) -> atom_to_list(Atom);
				  ({ExIm, String}) when ExIm == extends
							orelse ExIm == implements
							-> string:join([ExIm, String], " ");
				  (Char) when is_integer(Char) -> [Char];
				  (Any) -> Any
			       end,
			       List)

		    ),
	["\n"]
       ),
      " "
     ).
